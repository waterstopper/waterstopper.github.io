import std.svg as svg
import std.geometry2D as geom
import std.utils as utils

fun scaleAndRotate(node) {
    svg.transform("rotate", rndInt(0, 359), node)
    svg.transform("scale", str(rndDouble(0.5,1).round(3)) + " 1", node)
    svg.transform("transform-origin", node.center, node)
    return node
}

class FlowerHead {
    center = Point(x=70, y=70)
    size = 60
    offset = Point(x=rndInt(0, size/Constants.boundOffsetDiv),y=rndInt(0, size/Constants.boundOffsetDiv))
    petals = createPetals()
    svgArgs = {"order":["petals", "innerPoly"]}

    fun createPetals() {
        q = 14
        p = copy(center)
        r = RegularPolygon(center=p.plus(offset),q=q,r=size/Constants.centerRadiusDiv, fill=Constants.getCenter())
        t = RegularPolygon(center=p,q=q,r=size)
        return if(Constants.isSoft) createSoft(q,r,t) else createSharp(q,r,t)
    }

    fun createSoft(q, s, b) {
        res = []
        foreach(i in range(0, q-1, 2)) {
            petal = createPetal(s.points[(i+q-1)%q], b.points[i],\
                b.points[i+1], s.points[(i+2)%q])
            petal.svgArgs["attributes"]["d"] = petal.path.toString()
            petal.svgArgs["attributes"]["fill"] = Constants.getPetal()
            petal.svgArgs["inParent"] = true
            res.add(petal)
        }
        s.svgArgs["inParent"] = true
        this.innerPoly = s
        return res
    }

    fun createSharp(q, r, t) {
        points=[]
        foreach(i in range(0, q-1, 2)) {
            points.add(r.points[i])
            points.add(r.points[i+1])
            points.add(t.points[(i+q+1)%q])
            points.add(t.points[(i+q+2)%q])
        }
        this.innerPoly = r
        res = Polyline(points=points, isClosed=true, fill=Constants.getPetal())
        res.svgArgs["inParent"] = true
        r.svgArgs["inParent"] = true
        return res
    }

    fun createPetal(start, handle1, handle2, end) {
        res = Path()
        res.moveTo(start)
        res.curve(handle1, handle2, end)
        res.addRaw("Z")
        return res
    }
}

class Root {
    width = 400
    height = 300
    iter = 0
    stroke = Constants.getLight()
    s = FlowerSegment(p1=Point(x=width/2,y=height),\
        p2=Point(x=width/2,y=height-10))
}

class FlowerSegment: Segment {
    strokeWidth = 2
    stroke = parent.stroke
    iter = parent.iter + 1
    segment = if((p2 is Point) && p2.x != null && p2.y != null && iter < rndInt(5, 7)) \
        (if(rnd() > 0.7) DoubleFlowerSegment() \
        else FlowerSegment(p1=copy(p2),p2=copy(p2).plus(0,-20)\
            .rotate(rndInt(-45,45),copy(p2))))\
        else scaleAndRotate(FlowerHead(size=rndInt(15, 20),center=p2))
    shadow = Segment(p1=p1.plus(2,0),p2=p2.plus(2,0),strokeWidth=strokeWidth,stroke=Constants.getShadow())
    leaf = if(rnd() > 0.7) Leaf() else null
}

class DoubleFlowerSegment {
    iter = parent.iter + 1
    stroke = parent.stroke
    angle = rndInt(10, 45)
    s1 = FlowerSegment(p1=copy(parent.p2), \
        p2=copy(parent.p2)\
            .translate(parent.p2.minus(parent.p1))\
           .rotate(angle, parent.p1))
    s2 = FlowerSegment(p1=copy(parent.p2), \
        p2=copy(parent.p2)\
            .translate(parent.p2.minus(parent.p1))\
            .rotate(-angle, parent.p1))
}

class Leaf {
    p = createLeaf(1, rndInt(0, 359), -30 * rndDouble(0.8,1.2))
    fun createLeaf(mul, angle, len) {
        res = Path()
        res.moveTo(parent.p1)
        curveHandle = Point(x=mul * 15*rndDouble(0.3,1.2),y=-15*rndDouble(0.5,1.5))
        res.curve(curveHandle,curveHandle,Point(x=0,y=len), isRelative=true)
        res.addRaw("Z")
        res.svgArgs["attributes"]["d"] = res.path.toString()
        res.svgArgs["attributes"]["fill"] = if(mul-1) Constants.getLight() else Constants.getShadow()
        svg.transform("rotate", angle, res)
        svg.transform("transform-origin", parent.p1.toString(), res)
        if(mul == 1)
            this.p1 = createLeaf(-1, angle, len)
        return res
    }
}

/**
    Constants for a current flower
*/
object Constants {
    stemInd = rndInt(0, light.size-1)
    centerInd = rndInt(0, center.size-1)
    petalInd = rndInt(0, petal.size-1)
    isSoft = rndInt(0, 1)
    centerRadiusDiv = rndDouble(1.5,6)
    boundOffsetDiv = bounds[rndInt(0,bounds.size - 1)]
    bounds = [1, 2, 0.8]
    light = ["#8FBC8B", "#98FB98", "#808000","#F0E68C"]
    shadow = ["#008000","#2E8B57","#556B2F","#BDB76B"]
    center = ["#00008B", "#E0E8EE", "#F0E68C", "#FFE4C4", "#FFFACD"]
    petal = ["#9ACD32", "#BC244C", "#DB7093", "#D8BFD8", "#00BFFF"]
    fun getLight() {return light[stemInd]}
    fun getShadow() {return shadow[stemInd]}
    fun getCenter() {return center[centerInd]}
    fun getPetal() {return petal[petalInd]}
}

fun main() {
    flower = Root()
    svgRes = svg.createSVG(flower, 300, 400)
    write(svgRes, "result.svg")
}