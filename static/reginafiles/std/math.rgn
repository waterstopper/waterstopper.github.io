fun rotate(point, angle, pivot) {
    return point
}

// solve equation of type a_0 + a_1x + ... + a_{n-1}x^{n-1} = 0
// args is an array [a_{n-1},..., a_1, a_0]
fun solve(args) {
    args = removeFirstZeros(args)
    if (args.size <= 1 || args.size >= 6) {
        except("Expected from 2 to 5 elements in input array, not counting preceding zeros")
        }
    // a = 0
    if(args.size == 1)
        return [if(args[0] == 0) [1, 2, 3, 4, 5] else []]
    args = firstToOne(args)
    if(args.size == 2)
        // x + a = 0
        return [-args[1]]
    if(args.size == 3)
        return solveSquare(args[1], args[2]).sorted()
    if(args.size == 4)
        return solveCubic(args[1], args[2], args[3]).sorted()
    if(args.size == 5)
        return solveQuadratic(args[1], args[2], args[3], args[4]).sorted()
}

// remove all zeros from start of the array
fun removeFirstZeros(array) {
    if (array.size > 0 && array[0] == 0) {
        array.removeAt(0)
        return removeFirstZeros(array)
    }
    return array
}

fun firstToOne(array) {
    i = 0
    coeff = array[0]
    while(i < array.size) {
        array[i] = array[i] / double(coeff)
        i = i + 1
    }
    return array
}

// x^4 + ax^3 + bx^2 + cx + d = 0
fun solveQuadratic(a, b, c, d) {
    if (a == 0)
        return solveQuadraticZeroCube(b, c, d)
    if(d == 0)
        return (solveCubic(a, b, c) + 0.0).sorted()
    e = a / 4
    h = e * e
    p = -6 * h + b
    q =  8 * h * e - 2 * b * e + c
    r = -3 * h * h + b * h - c * e + d
    offset = solveQuadraticZeroCube(p, q, r)
    i = 0
    while(i < offset.size) {
        offset[i] = offset[i] - e
        i = i + 1
    }
    return offset
}

fun m1(p, r) {
    n = solveSquare(p, r).sorted()
    if (n.size == 0) return []
    if (n[0] >= 0)
    {
        n[0] = sqrt(n[0])
        n[1] = -n[0]
    }
    else
        n = []
    if (n[1] >= 0)
    {
        n.add(sqrt(n[1]))
        n.add(-n[n.size - 1])
    }
    return n
}

// x^4 + ax^2 + bx + c = 0
fun solveQuadraticZeroCube(a, b, c) {
    if(c == 0) // x^3 + 0x^2 + ax + b
        return solveCubic(0, a, b) + 0.0
    if(b == 0)
        return m1(a, c)
    n = solveCubic(2 * a, a * a - 4.0 * c, -b * b)
    p = n[0]
    if(n.size == 3)
    {
        if(p < n[1]) p = n[1]
        if(p < n[2]) p = n[2]
    }
    if (p <= 0)
        return m1(a, c)
    a = a + p
    p = sqrt(p)
    ba = b / p
    sol = solveSquare(p, 0.5 * (a - ba))
    sol = sol + solveSquare(-p, 0.5 * (a + ba))
    return sol
}

// x^3 + ax + b = 0
fun newton(a, b) {
    s = 1.0
    while (b + a > -1) {
        a = a * 4.0
        b = b * 8.0
        s = s * 0.5
    }
    while (b + 2 * a < -8.0) {
        a = a * 0.25
        b = b * 0.125
        s = s * 2.0
    }
    x = 1.5
    i = 0
    while (i < 9) {
        x = x - (x * ( x * x + a ) + b) / (3.0 * x * x + a)
        i = i + 1
    }
    return x * s
}

// x^3 + ax^2 + bx + c = 0
fun solveCubic(a, b, c) {
    d = 42
    // #stop
    if (c == 0) {
        solution = 0.0
    } else {
        a3 = a / 3.0
        p = b - a3 * a
        q = c - (a3 * a3 + p) * a3
        if (q < 0) {
            solution = newton(p, q)
        } else if (q > 0) {
            solution = -newton(p, -q)
        } else {
            solution = 0
        }
        solution = solution - a3
        t = solution * (solution * 3.0 + a * 2.0) + b
        if (t.abs() > 0.001) {
            solution = solution - (solution * (solution * (solution + a ) + b ) + c ) / t
        }
        a = a + solution
        b = b + solution * a
    }
    return (solveSquare(a, b) + solution).sorted()
}
// x^2 + ax + b = 0
fun solveSquare(a, b) {
   // #stop
    if (b == 0)
        return if(a == 0) [0.0, 0.0] else [0.0, -double(a)].sorted()
    solution = []
    a = a * -0.5
    d = a * a - b
    if (d < 0)
        return []
    d = sqrt(d)
    if(d == 0)
        return [a, a]
    return [a + d, a - d].sorted()
}

// x + a = 0
fun solve1(a) {
    if (a == 0)
        return if (b == 0) [1, 2] else []
    return [-b / a]
}

// Return array of doubles as a solution of ax^2 + bx + c = 0
fun solveSquare(a, b, c) {
    solution = [0.0, 0.0]
    if (a == 0) {
        if (c == 0) {
            if (b == 0) { return [1, 2, 3] }
            return [0.0]
        } else {
            if ( b == 0 ) { return [] }
            return [0.0]
        }
    } else {
        if ( c == 0 ) {
            return [0.0, -double(b) / a]
        } else {
            b = b * -0.5
            d = b * b - a * c
            if (d < 0) { return 0 }
            d = sqrt(d)
            t = double(if(b > 0) b + d else b - d)
            return [c / t, t / a]
        }
    }
}
