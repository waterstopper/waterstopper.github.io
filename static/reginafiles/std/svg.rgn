import std.utils as utils
import std.geometry2D as geom

fun createHeader(node) {
    res = StringBuilder(string=["<" + getName(node)] + " ")
    if(node?.svgArgs["attributes"] != null \
        && node.svgArgs["attributes"]["transform"] != null) {
            res.add(transformToString(node.svgArgs["attributes"]["transform"]))
            node.svgArgs["attributes"].remove("transform")
        }
    foreach(attr in (node?.svgArgs["attributes"]?.entries ?? [])) {
        res.add(str(attr["key"]) + "=\"" + attr["value"] + "\"")
    }
    res.add(">")
    return res.toString()
}

fun createFooter(node) { return "\n</" + getName(node) + ">" }

fun getName(node, default="g") {
    return node?.svgArgs["name"] ?? default
}

fun createBody(node, stack, created) {
    res = StringBuilder()
    childrenDict = node.properties
    if(node is Text)
        res.add(childrenDict["text"])
    if(node?.svgArgs["order"] != null)
        foreach(child in node.svgArgs["order"]) {
            if(childrenDict[child] !is Class) {
                traverseChildren(childrenDict[child], stack, created, res)
            }
            res.add("\t\n" + createNode(\
                childrenDict[child] ?? except("No child " + child + " in " + node),\
                stack, created))
            childrenDict.remove(child)
        }
    traverseChildren(childrenDict.values, stack, created, res)
    return res.toString()
}

fun traverseChildren(children, stack, created, res) {
    foreach(child in children) {
        if(child is List) {
            traverseChildren(child, stack, created, res)
        }
        else if(child is Dictionary) {
            traverseChildren(child.keys, stack, created, res)
            traverseChildren(child.values, stack, created, res)
        } else resolveNode(child, stack, created, res)
    }
}

fun resolveNode(node, stack, created, res) {
    if((node is Class) && created[str(node)] == null)
        if(node?.svgArgs["inParent"] ?? false)
            res.add("\t\n" + createNode(node, stack, created))
        else stack.add(createNode(node, stack, created))
}

fun createNode(node, stack, created) {
    created[str(node)] = true
    res = createHeader(node) + createBody(node, stack, created) \
        + createFooter(node)
    return if(res=="<g >\n</g>") "" else res
}

fun createSVG(root, width=100, height=100) {
    res = StringBuilder(string=[\
        "<svg width="+width+" height="+height + \
        " version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n"])
    stack = []
    res.add(createNode(root, stack, {}))
    stack.reverse()
    foreach(i in stack)
        res.add(i)
    res.add("\n</svg>")
    return res.toString()
}

/**
exportArgs:
    export: Bool = false - export or not
    type: String = "element" - "attribute" or "element"
    inParent: String = false - nest element inside parent element,
        if both instances' type is "element"
    name: String - name of exported attribute/element
    value: Any - value of attribute node
    attributes - Dictionary<String, Any> - all attributes are
        added from dictionary to element
    order: Array - draw order of children elements
*/

fun transform(type, value, node) {
    if(node?.svgArgs == null)
        node.svgArgs = {"attributes":{"transform":{}}}
    else if(node.svgArgs["attributes"] == null)
        node.svgArgs["attributes"] = {"transform":{}}
    else if(!node.svgArgs["attributes"].has("transform"))
        node.svgArgs["attributes"]["transform"] = {}
    node.svgArgs["attributes"]["transform"][type] = value
}

/* create attibute string for transform
 and transform-origin, if exists */
fun transformToString(transform) {
    res = StringBuilder()
    if(transform.has("transform-origin")) {
        res.add("transform-origin=\"")
        res.add(transform["transform-origin"].toString())
        res.add("\"")
        transform.remove("transform-origin")
    }
    res.add("transform=\"")
    foreach(entry in transform.entries) {
        res.add(entry["key"])
        res.add("(" + if(entry["value"] !is String) entry["value"].toString() \
            else entry["value"])
        res.add(") ")
    }
    res.add("\"")
    return res.toString()
}

fun merge(thisSvg, otherSvg) {
    thisSvg = thisSvg.substring(0, thisSvg.size - 6)
    return thisSvg + otherSvg.substring(otherSvg.index(">")+1)
}